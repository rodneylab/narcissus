---
import {cardContainer,cardContent, extraSummaryText, header, summaryHeading, summaryText} from './index.css';
import Layout from '../components/Layout/index.tsx';
import Card from '../components/Card.jsx';
import BlogRoll from '../components/BlogRoll.jsx';
import fm from 'front-matter';
import fs from 'node:fs';
import path from 'node:path';

const __dirname = path.resolve();
const BLOG_PATH = path.join(__dirname, 'content/blog');
const directories = fs.readdirSync(BLOG_PATH).filter((element) => fs.lstatSync(`${BLOG_PATH}/${element}`).isDirectory());

const posts = directories.map((element) => {
  const contentPath = `${BLOG_PATH}/${element}/index.md`;
  if (fs.existsSync(contentPath)) {
    const content = fs.readFileSync(contentPath, { encoding: 'utf-8'});
    const frontmatter = fm(content);
    const {datePublished, postTitle, seoMetaDescription} = frontmatter.attributes;
    return {slug: element, datePublished, postTitle, seoMetaDescription, likes: 1, views: 2, comments: 3 };
  }
})

const slug = "/";
---

<html lang="en-GB">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width">
</head>
<body>
    <Layout client:load slug={slug} >
<header class={header}>
  <h1>Narcissus: API as a Service / Backendless Blog</h1>
</header>
<Card containerClass={cardContainer} contentClass={cardContent}>
  <h2 class={summaryHeading}><span>About Narcissus</span></h2>
  <p class={summaryText}>
    Narcissus is a proof of concept <strong>backend as a service</strong> app which lets you create
    a blog site quicker by managing important blog features like
    <strong>comment and message forms</strong>
    as well as post
    <strong>views and likes</strong>.
  </p>
  <p class={extraSummaryText}>
    This demo <strong>Svelte</strong> site is static and uses Serverless
    <strong>Rust Cloudflare Workers</strong>
    to read and create comments as well as other interactive elements using REST requests, adding spam
    detection and Captchas without the added hassle of adding spam detection and Captchas. The app is
    backed by a <strong>Supabase</strong> PostgreSQL database.
  </p>
</Card>
<BlogRoll posts={posts}/>
    </Layout>
</body>
</html>
