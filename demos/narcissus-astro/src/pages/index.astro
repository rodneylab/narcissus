---
import { header } from './index.css';
import Layout from '../components/Layout/index.tsx';
import BlogRoll from '../components/BlogRoll.tsx';
import fm from 'front-matter';
import fs from 'node:fs';
import path from 'node:path';
import website from '../configuration/website.ts';
import AboutCard from '../components/AboutCard.tsx';

const { workerUrl } = website;
const __dirname = path.resolve();
const BLOG_PATH = path.join(__dirname, 'content/blog');
const directories = fs
  .readdirSync(BLOG_PATH)
  .filter((element) => fs.lstatSync(`${BLOG_PATH}/${element}`).isDirectory());

async function getResponse(slug) {
  try {
    return fetch(`${workerUrl}/post/data`, {
      method: 'POST',
      credentials: 'omit',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        slug,
      }),
    });
  } catch (error) {
    console.log(`Error in fetch request for ${slug}: ${error}`);
  }
}

const postPromises = directories.map(async (element) => {
  const contentPath = `${BLOG_PATH}/${element}/index.md`;
  if (fs.existsSync(contentPath)) {
    const response = await getResponse(element);
    const data = await response.json();
    const { comments, likes, views } = data;
    const content = fs.readFileSync(contentPath, { encoding: 'utf-8' });
    const frontmatter = fm(content);
    const { datePublished, postTitle, seoMetaDescription } = frontmatter.attributes;
    return {
      slug: element,
      datePublished,
      postTitle,
      seoMetaDescription,
      likes,
      views,
      comments: comments.length,
    };
  }
});
const posts = await Promise.all(postPromises);

const slug = '/';
---

<html lang="en-GB">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
  </head>
  <body>
    <Layout client:load {slug}>
      <header class={header}>
        <h1>Narcissus: API as a Service / Backendless Blog</h1>
      </header>
      <AboutCard client:load />
      <BlogRoll client:idle {posts} />
    </Layout>
  </body>
</html>
